#ifndef ESP_HAL_S3_H
#define ESP_HAL_S3_H

#include <RadioLib.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/spi_master.h"
#include "driver/gpio.h"
#include "esp_timer.h"
#include "esp_log.h"

#define LOW  (0x0)
#define HIGH (0x1)
#define INPUT  (0x01)
#define OUTPUT (0x03)
#define RISING  (0x01)
#define FALLING (0x02)

#define SPI_HOST    SPI3_HOST  // ESP32-S3 uses SPI3 (FSPI) for general-purpose SPI
#define SPI_CLOCK   2000000    // 2MHz default clock speed

class EspHal : public RadioLibHal {
public:
    EspHal(int8_t sck, int8_t miso, int8_t mosi, int8_t cs)
        : RadioLibHal(INPUT, OUTPUT, LOW, HIGH, RISING, FALLING),
          spiSCK(sck), spiMISO(miso), spiMOSI(mosi), spiCS(cs) {}

    void init() override {
        spiBegin();
    }

    void term() override {
        spiEnd();
    }

    void pinMode(uint32_t pin, uint32_t mode) override {
        if(pin == RADIOLIB_NC) return;
        gpio_set_direction((gpio_num_t)pin, (gpio_mode_t)mode);
    }

    void digitalWrite(uint32_t pin, uint32_t value) override {
        if(pin == RADIOLIB_NC) return;
        gpio_set_level((gpio_num_t)pin, value);
    }

    uint32_t digitalRead(uint32_t pin) override {
        if(pin == RADIOLIB_NC) return 0;
        return gpio_get_level((gpio_num_t)pin);
    }

    void delay(unsigned long ms) override {
        vTaskDelay(ms / portTICK_PERIOD_MS);
    }

    void delayMicroseconds(unsigned long us) override {
        esp_rom_delay_us(us);
    }

    unsigned long millis() override {
        return (unsigned long)(esp_timer_get_time() / 1000ULL);
    }

    unsigned long micros() override {
        return (unsigned long)(esp_timer_get_time());
    }

    void spiBegin() {
        spi_bus_config_t buscfg = {
            .mosi_io_num = spiMOSI,
            .miso_io_num = spiMISO,
            .sclk_io_num = spiSCK,
            .quadwp_io_num = -1,
            .quadhd_io_num = -1,
            .max_transfer_sz = 32
        };
        
        spi_device_interface_config_t devcfg = {
            .clock_speed_hz = SPI_CLOCK,
            .mode = 0,
            .spics_io_num = spiCS,
            .queue_size = 1
        };
        
        spi_bus_initialize(SPI_HOST, &buscfg, SPI_DMA_CH_AUTO);
        spi_bus_add_device(SPI_HOST, &devcfg, &spiHandle);
    }

    uint8_t spiTransferByte(uint8_t data) {
        spi_transaction_t trans = {
            .length = 8,
            .tx_buffer = &data,
            .rx_buffer = &data
        };
        spi_device_transmit(spiHandle, &trans);
        return data;
    }

    void spiTransfer(uint8_t* out, size_t len, uint8_t* in) {
        spi_transaction_t trans = {
            .length = len * 8,
            .tx_buffer = out,
            .rx_buffer = in
        };
        spi_device_transmit(spiHandle, &trans);
    }

    void spiEnd() {
        spi_bus_remove_device(spiHandle);
        spi_bus_free(SPI_HOST);
    }

private:
    int8_t spiSCK;
    int8_t spiMISO;
    int8_t spiMOSI;
    int8_t spiCS;
    spi_device_handle_t spiHandle;
};

#endif
